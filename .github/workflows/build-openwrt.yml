#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 8 */5 * *

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GITHUB_USER /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@v2
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      if: steps.compile.outputs.status == 'success' && env.GITHUB_TOKEN && env.GITHUB_REPOSITORY
      run: |
        FILE_DATE=$(date +"%Y-%m-%d")
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*/$DEVICE_NAME
        TAG_NAME="${{ env.PREFIX_TAG_NAME }}$FILE_DATE"
        RELEASE_ID=$(curl -s "https://api.github.com/repos/${{ env.GITHUB_REPOSITORY }}/releases/tags/$TAG_NAME" | grep 'id' | cut -f4 -d'"')
        if [ -z "$RELEASE_ID" ]; then
          RELEASE_NAME="OpenWrt AutoCI $FILE_DATE"
          RELEASE_BODY="Auto build by GitHub Actions. $FILE_DATE"
          curl -X POST "https://api.github.com/repos/${{ env.GITHUB_REPOSITORY }}/releases" -H "Authorization: token ${{ env.GITHUB_TOKEN }}" -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"$RELEASE_NAME\",\"body\":\"$RELEASE_BODY\"}"
        else
          echo "Release already exists for tag $TAG_NAME."
        fi

    - name: Release
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        cd openwrt
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add .
        git commit -m "Auto compile OpenWrt [AutoCI]"
        [ -z "$(git status -s)" ] || git push
        TOKEN=$(curl -s "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" | grep 'upload_url' | cut -f4 -d'"')
        FILE=$(curl -s "$TOKEN?name=OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.7z" | cut -f4 -d'"')
        echo -e "  \n  - [OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.7z]($FILE)" >> ../../README.md
        RELEASE_ID=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.FILE_DATE }}" | grep 'id' | cut -f4 -d'"')
        RELEASE_NAME=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.FILE_DATE }}" | grep 'name' | cut -f4 -d'"')
        curl -X POST "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"name\":\"$RELEASE_NAME\",\"body\":\"$(cat message.txt)\"}"
        rm -f message.txt

    - name: Send Telegram
      if: steps.compile.outputs.status == 'success' && env.TELEGRAM_CHAT_ID && env.TELEGRAM_BOT_TOKEN
      run: |
        curl -s https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument -F chat_id=${TELEGRAM_CHAT_ID} -F document=@$FIRMWARE -F caption="${{ env.DEVICE_NAME }} - OpenWrt [AutoCI]"

    - name: Send Email
      if: steps.compile.outputs.status == 'success' && env.EMAIL_ADDRESS && env.EMAIL_SMTP_SERVER && env.EMAIL_SMTP_PORT && env.EMAIL_SMTP_USERNAME && env.EMAIL_SMTP_PASSWORD
      run: |
        curl -fsSL git.io/smtpmail.sh | sh -s -- -s $EMAIL_SMTP_SERVER -p $EMAIL_SMTP_PORT -xu $EMAIL_SMTP_USERNAME -xp $EMAIL_SMTP_PASSWORD -t $EMAIL_ADDRESS -o $EMAIL_SMTP_SERVER -u "Build OpenWrt [AutoCI]" -m "OpenWrt compilation is complete, please check the attachment." -a $FIRMWARE

    - name: End
      if: always()
      run: exit 0
